<?php
// $Id: i18nblocks.module,v 1.7.2.25 2010/08/12 02:06:20 mirodietiker Exp $

/**
 * @file
 * Internationalization (i18n) submodule: Multilingual meta-blocks
 *
 * @author Jose A. Reyero, 2005
 *
 * @ TODO Add strings on block update.
 */

// Tag for localizable block, cannot be any language.
define('I18N_BLOCK_LOCALIZE', '__LOCALIZE__');
// Block type: localizable
define('I18N_BLOCK_LOCALIZABLE', 1);
// Block type: block with language
define('I18N_BLOCK_LANGUAGE', 0);

/**
 * Block types
 */
function _block_types() {
  return array(
    I18N_BLOCK_LOCALIZE => t('Localizable block'),
    I18N_BLOCK_METABLOCK => t('Multilingual block (Metablock)'),
  );
}

/**
 * Implements hook_help().
 */
function i18nblocks_help($path, $arg) {
  switch ($path) {
    case 'admin/help#i18nblocks':
      $output = '<p>'. t('This module provides support for multilingual blocks.') .'</p>';
      $output .= '<p>'. t('You can set up a language for a block or define it as translatable:') .'</p>';
      $output .= '<ul>';
      $output .= '<li>'. t('Blocks with a language will be displayed only in pages with that language.') .'</li>';
      $output .= '<li>'. t('Translatable blocks can be translated using the localization interface.') .'</li>';
      $output .= '</ul>';
      $output .= '<p>'. t('To search and translate strings, use the <a href="@translate-interface">translation interface</a> pages.', array('@translate-interface' => url('admin/build/translate'))) .'</p>';
      return $output;
  }
}

/**
 * Implements hook_query_alter().
 *
 * @TODO Maybe solve with hook_block_info_alter().
 */
function i18nblocks_query_alter(QueryAlterableInterface $query) {
  $x = 1;
//  //&& $query->getMetaData('base_table') == 'bid'
//  $tables = $query->getTables();
//  if (in_array('b', $tables) || in_array('block', $tables)) {
//    $query->leftJoin('i18n_blocks', 'i18n', 'b.module = i18n.module AND b.delta = i18n.delta');
//    $query->where(i18n_db_rewrite_where('i18n', 'block', 'simple'));
//  }
}

/**
 * Implements hook_block_info_alter().
 *
 * @TODO Replace this ugly pice of code by a smarter solution.
 */
function i18nblocks_block_info_alter (&$blocks, $theme, $code_blocks) {
  $current = i18n_get_lang();

  $conditions = db_condition('OR');
  foreach ($blocks as $module => $block) {
    $conditions->condition(db_condition('AND')
      ->condition('b.module', $module)
      ->condition('b.delta', key($block))
    );
  }

  $query = db_select('block', 'b')
    ->fields('b', array('module', 'delta'))
    ->condition(db_condition('OR')
      ->condition('ib.language', '')
      ->condition('ib.language', NULL)
      ->condition('ib.language', $current)
    )
    ->condition($conditions);
  $query->leftJoin('i18n_blocks', 'ib', 'b.module = ib.module AND b.delta = ib.delta');
  $query->addExpression("CONCAT(b.module, :db_expr_palceholder, b.delta)", 'md', array(':db_expr_palceholder' => '_'));
  $i18n_blocks = $query->execute()
    ->fetchAllAssoc('md');

  foreach ($blocks as $module => $block) {
    if (!isset($i18n_blocks[ $module .  '_' . key($block)])) {
      unset($blocks[$module][key($block)]);
    }
  }
}

/**
 * Implements hook_locale().
 *
 * This one doesn't need locale refresh because strings are stored from module config form.
 */
function i18nblocks_locale($op = 'groups', $group = NULL) {
  switch ($op) {
    case 'groups':
      return array('blocks' => t('Blocks'));
    case 'info':
      $info['blocks']['refresh callback'] = 'i18nblocks_locale_refresh';
      $info['blocks']['format'] = TRUE;
      return $info;
  }
}

/**
 * Refresh all strings.
 */
function i18nblocks_locale_refresh() {
  $query = db_select('blocks', 'b')
    ->distinct()
    ->fields('b', array('module', 'delta', 'title'))
    ->fields('bc', array('body', 'format'))
    ->fields('i18nb', array('ibid', 'language'));
  $query->leftJoin('block_custom', 'bc', 'b.module = :db_join_placeholder AND b.delta = bx.bid', array(':db_join_placeholder' => 'block'));
  $query->leftJoin('i18n_blocks', 'i18nb', 'b.module = i18nb.module AND b.delta = i18nb.delta');
  $result = $query->execute()
    ->fetchAll(PDO::FETCH_OBJ);
  foreach ($result as $block) {
    if (!$block->language) {
      // If the block has a custom title and no language it must be translated
      if ($block->title && $block->title != '<none>') {
        i18nstrings_update("blocks:$block->module:$block->delta:title", $block->title);
      }
      // If the block has body and no language, must be a custom block (box)
      if ($block->body) {
        i18nstrings_update("blocks:$block->module:$block->delta:body", $block->body, $block->format);
      }
    }
  }
  return TRUE; // Meaning it completed with no issues
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function i18nblocks_form_block_box_delete_alter(&$form, $form_state) {
  $delta = db_select('i18n_blocks', 'i18nb')
    ->fields('i18nb', array('ibid'))
    ->condition('delta', arg(4))
    ->execute()
    ->fetchColumn();
  $form['delta'] = array(
    '#type' => 'value',
    '#value' => $delta,
  );
  $form['#submit'][] = 'i18nblocks_block_delete_submit';
}

/**
 * Remove strings for deleted custom blocks.
 */
function i18nblocks_block_delete_submit(&$form, $form_state) {
  $delta = $form_state['values']['delta'];
  // Delete stored strings for the title and content fields.
  i18nstrings_remove_string("blocks:block:$delta:title");
  i18nstrings_remove_string("blocks:block:$delta:body");
}

/**
 * Implements block hook_form_FORM_ID_alter().
 *
 * Remove block title for multilingual blocks.
 */
function i18nblocks_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  i18nblocks_alter_forms($form, $form_state, $form_id);
}

/**
 * Implements block hook_form_FORM_ID_alter().
 *
 * Remove block title for multilingual blocks.
 * @deprecated Looks like this is a D6 artefact
 */
function i18nblocks_form_block_box_form_alter(&$form, &$form_state, $form_id) {
  i18nblocks_alter_forms($form, $form_state, $form_id);
}

/**
 * Implements block hook_form_FORM_ID_alter().
 *
 * Remove block title for multilingual blocks.
 */
function i18nblocks_form_block_add_block_form_alter(&$form, &$form_state, $form_id) {
  i18nblocks_alter_forms($form, $form_state, $form_id);
}


/**
 * Central function to do form alterations.
 *
 * Remove block title for multilingual blocks.
 * Affected forms:
 * - block_admin_configure
 * - block_box_form
 * - block_add_block_form
 */
function i18nblocks_alter_forms(&$form, &$form_state, $form_id) {
  $module = $form['module']['#value'];
  $delta = $form['delta']['#value'];
  $form['i18n'] = array(
      '#type' => 'fieldset',
      '#title' => t('Multilingual settings'),
      '#collapsible' => TRUE,
      '#weight' => -1,
  );

  $i18nblock = i18nblocks_load($module, $delta);
  $form['i18n'] = array(
      '#type' => 'fieldset',
      '#title' => t('Multilingual settings'),
      '#collapsible' => TRUE,
      '#weight' => 0,
  );
  // Language options will depend on block type.
  $options = array('' => t('All languages'));
  if ($module == 'block') {
    $options[I18N_BLOCK_LOCALIZE] = t('All languages (Translatable)');
  }
  $options += locale_language_list('name');

  $form['i18n']['language'] = array(
      '#type' => 'radios',
      '#title' => t('Language'),
      '#default_value' => $i18nblock->language,
      '#options' => $options,
  );
  // Pass i18ndelta value.
  $form['i18n']['ibid'] = array('#type' => 'value', '#value' => $i18nblock->ibid);
  $form['#submit'][] = 'i18nblocks_form_submit';
}

/**
 * Forms api callback. Submit function.
 */
function i18nblocks_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  // Dirty trick to act on new created blocks. Delta may be zero for other modules than block.
  if (!$values['delta'] && $values['module'] == 'block') {
    // The last insert id will return a different value in mysql
    //$values['delta'] = db_last_insert_id('boxes', 'bid');
    $values['delta'] = db_result(db_query("SELECT MAX(bid) FROM {block_custom}"));
  }
  i18nblocks_save($values);
}

/**
 * Get block language data.
 */
function i18nblocks_load($module, $delta) {
  $block = db_select('i18n_blocks', 'i18nb')
    ->condition('module', $module)
    ->condition('delta', $delta)
    ->execute()
    ->fetchObject();
  // If no result, return default settings
  if ($block && !$block->language) {
    $block->language = I18N_BLOCK_LOCALIZE;
  }
  return $block ? $block : (object)array('language' => '', 'ibid' => 0);
}

/**
 * Set block language data.
 *
 * @param array $block
 *   Array of block parameters: module, delata, ibid (internal i18nblocks delta).
 */
function i18nblocks_save($block) {
  if (!empty($block['language'])) {
    if ($block['language'] == I18N_BLOCK_LOCALIZE) {
      $block['language'] = '';
    }
    // Update strings for localizable blocks.
    if ($block['ibid']) {
      drupal_write_record('i18n_blocks', $block, 'ibid');
    }
    else {
      drupal_write_record('i18n_blocks', $block);
    }
  }
  else {
    // No language, delete all i18n information.
    db_delete('i18n_blocks', 'i18nb')
      ->condition('module',  $block['module'])
      ->condition('delta',  $block['delta'])
      ->execute();
  }
  // If localize block or block without language
  if (!$block['language']) {
    // We use ibid property instead of block's delta as block id for strings
    $module = $block['module'];
    $delta = $block['delta'];
    if (!empty($block['title']) && $block['title'] != '<none>') {
      i18nstrings_update("blocks:$module:$delta:title", $block['title']);
    }
    if (isset($block['body'])) {
      i18nstrings_update("blocks:$module:$delta:body", $block['body'], $block['format']);
    }
  }
}

/**
 * Translate block.
 *
 * @param $block
 *   Core block object
 */
function i18nblocks_translate_block($block) {
  // Localizable blocks may get the body translated too.
  $localizable = _i18nblocks_list();
  if (!empty($block->content) && $localizable && isset($localizable[$block->module][$block->delta])) {
    $block->content = i18nstrings_text("blocks:$block->module:$block->delta:body", $block->content);
  }
  // If it has a custom title, localize it
  if (!empty($block->title) && $block->title != '<none>') {
    // Check plain here to allow module generated titles to keep any markup.
    $block->subject = i18nstrings_string("blocks:$block->module:$block->delta:title", $block->subject);
  }
  return $block;
}

/**
 * Implements hook_preprocess_block().
 *
 * Translate blocks.
 *
 * @see block.tpl.php
 */
function i18nblocks_preprocess_block(&$variables) {
  global $language;

  $block = $variables['block'];

  // Replace menu blocks by their translated version.
  if (module_exists('i18nmenu')) {
    if ($block->module == 'menu') {
      $block->content = i18nmenu_translated_tree($block->delta);
      if ($block->subject && empty($block->title)) {
        $block->subject = i18nstrings_string('menu:menu:' . $block->delta . ':title', $block->subject);
      }
    }
    elseif ($block->module == 'user' && $block->delta == 1) {
      $block->content = i18nmenu_translated_tree('navigation');
    }
  }

  // If the block has language, do nothing, it is suppossed to be translated
  $havelanguage = _i18nblocks_list($language->language);
  if ($havelanguage && isset($havelanguage[$block->module][$block->delta])) {
    return;
  }
  else {
    $variables['block'] = i18nblocks_translate_block($block);
  }
}

/**
 * Get list of blocks i18n properties
 * @param $reset
 * 	 Whether to reset the internal cache for the block list.
 */
function _i18nblocks_list($langcode = '', $reset = FALSE) {
  $list = &drupal_static(__FUNCTION__, array(), $reset);

  // Handle issues when no $langcode, use a different array index
  $index = $langcode ? $langcode : I18N_BLOCK_LOCALIZE;

  if (!isset($list[$index])) {
    $list[$index] = array();
    $results = db_select('i18n_blocks', 'i18nb')
      ->fields('i18nb')
      ->condition('language', $langcode)
      ->execute()
      ->fetchAll(PDO::FETCH_OBJ);
    foreach($results as $info) {
      $list[$index][$info->module][$info->delta] = $info;
    }
  }
  return $list[$index];
}
