<?php
// $Id: i18ncontent.module,v 1.1.2.20 2010/07/30 01:14:03 mirodietiker Exp $

/**
 * @file
 * Internationalization (i18n) package - translatable content type parameters
 *
 * This new module uses a pure forms/strings approach as opposed to the old one (v5)
 * which was using some dirty db rewrite tricks.
 *
 * The i18n strings created by this module are:
 * - nodetype:type:[type]:[name,title,body,help]
 *
 * @author Jose A. Reyero, 2007
 */

/**
 * Implements hook_block_view_MODULE_DELTA_alter().
 * 
 * Set translated help text for node/add pages, replace node_help() text.
 */
function i18ncontent_block_view_system_help_alter(&$block) {
  $arg = drupal_help_arg(arg(NULL));
  if ($arg[0] == 'node' && $arg[1] == 'add' && $arg[2]) {
    if (($type = node_type_get_type(str_replace('-', '_', $arg[2]))) && !empty($type->help)) {
      $help = i18ncontent_translate($type, 'help');
      if ($help !== $type->help) {
        $block['content'] = str_replace(filter_xss_admin($type->help), filter_xss_admin($help), $block['content']);
      }
    } 
  } 
}

/**
 * Implements hook_help().
 */
function i18ncontent_help($path, $arg) {
  switch ($path) {
    case 'admin/help#i18ncontent':
      $output = '<p>'. t('This module will localize all content type configuration texts.') .'</p>';
      $output .= '<ul>';
      $output .= '<li>'. t('Content type names') .'</li>';
      $output .= '<li>'. t('Submission guidelines') .'</li>';
      $output .= '<li>'. t("Content type descriptions were previously localized so they won't be affected.") .'</li>';
      $output .= '</ul>';
      $output .= '<p>'. t('To search and translate strings, use the <a href="@translate-interface">translation interface</a> pages.', array('@translate-interface' => url('admin/build/translate'))) .'</p>';
      return $output;
  }
}

/**
 * Implements hook_locale().
 */
function i18ncontent_locale($op = 'groups', $group = NULL) {
  switch ($op) {
    case 'groups':
      return array('nodetype' => t('Content type'));
    case 'info':
      $info['nodetype']['refresh callback'] = 'i18ncontent_locale_refresh';
      $info['nodetype']['format'] = FALSE;
      // These are not that many strings so we use the prefetch feature
      //$info['nodetype']['class'] = 'i18nstrings_prefetch';
      return $info;
  }
}

/**
 * Refresh content type strings.
 */
function i18ncontent_locale_refresh() {
  foreach (node_type_get_types() as $type) {
    i18nstrings_textgroup('nodetype')
      ->update("type:$type->type:name", $type->name)
      ->update("type:$type->type:title", $type->title_label)
    //i18nstrings_update("nodetype:type:$type->type:body", $type->body_label);
      ->update("type:$type->type:description", $type->description)
      ->update("type:$type->type:help", $type->help);
  }
  return TRUE; // Meaning it completed with no issues
}

/**
 * Implements hook_form_alter().
 */
/*
function i18ncontent_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {
    case 'node_type_form':
      // Replace the help text default value in the node type form with data from
      // i18nstrings. Help text is handled in hook_node_type() and hook_help().
      $type = $form['#node_type']->type;
      if ($type) {
        // Fetch default language node type help
        $source = i18ncontent_node_help_source($type);
        // We dont need to pass the value through i18nstrings_ts()
        $form['submission']['help']['#default_value'] = $source->source;
      }
      break;

    case 'search_form':
      // Advanced search form. Add language and localize content type names
      if ($form['module']['#value'] == 'node' && !empty($form['advanced'])){
        // @todo Handle language search conditions
        //$form['advanced']['language'] = _i18n_language_select();
        if (!empty($form['advanced']['type'])) {
          foreach ($form['advanced']['type']['#options'] as $type => $name) {
            $form['advanced']['type']['#options'][$type] = i18nstrings("nodetype:type:$type:name", $name);
          }
        }
      }
      break;

    default:
      // Translate field names for title and body for the node edit form.
      if (isset($form['#id']) && $form['#id'] == 'node-form') {
        $type = $form['#node']->type;
        if (!empty($form['title']['#title'])) {
          $form['title']['#title'] = i18nstrings("nodetype:type:$type:title", $form['title']['#title']);
        }
        if (!empty($form['body_field']['body']['#title'])) {
          $form['body_field']['body']['#title'] = i18nstrings("nodetype:type:$type:body", $form['body_field']['body']['#title']);
        }
      }
      break;
  }
}
*/
/**
 * Implements hook_node_type().
 */
function i18ncontent_node_type($op, $info) {
  $language = language_default('language');
  if ($op == 'insert' || $op == 'update') {
    if(!empty($info->old_type) && $info->old_type != $info->type) {
      i18nstrings_update_context("nodetype:type:$old_type:*", "nodetype:type:$type:*");
    }
    i18nstrings_textgroup('nodetype')
      ->update("type:$type->type:name", $type->name)
      ->update("type:$type->type:title", $type->title_label)
    //i18nstrings_update("nodetype:type:$type->type:body", $type->body_label);
      ->update("type:$type->type:description", $type->description)
      ->update("type:$type->type:help", $type->help);
  }

  if ($op == 'delete') {
    i18nstrings_textgroup('nodetype')
      ->remove("type:$info->type:title")
      ->remove("type:$info->type:name")
      ->remove("type:$info->type:description")
    //i18nstrings_remove("nodetype:type:$info->type:body");
      ->remove("type:$info->type:help");
  }
}


/**
 * Implements hook_menu_alter().
 *
 * Take over the node add pages.
 */
function i18ncontent_menu_alter(&$menu) {
  $menu['node/add']['page callback'] =  'i18ncontent_node_add_page';
  // @TODO avoid iterating over every router path.
  foreach ($menu as $path => $item) {
    if (!empty($item['page callback']) && $item['page callback'] == 'node_add') {
      $menu[$path]['page callback'] = 'i18ncontent_node_add';
      $arg = arg(NULL, $path);
      $menu[$path]['title callback'] = 'i18ncontent_translate';
      $menu[$path]['title arguments'] = array($arg[2], 'name', $item['title']);
    }
  }
}

/**
 * Replacement for node_add_page.
 */
function i18ncontent_node_add_page() {
  $item = menu_get_item();
  $content = system_admin_menu_block($item);
  // Bypass the node/add listing if only one content type is available.
  if (count($content) == 1) {
    $item = array_shift($content);
    drupal_goto($item['href']);
  }
  foreach ($content as &$item) {
    // Type machine name will be the third part of the path
    $parts = explode('/', $item['path']);
    $type = $parts[2];
    // We just need to translate the description, the title is translated by the menu system
    // The string will be filtered (xss_admin) on the theme layer
    $item['description'] = i18ncontent_translate($type, 'description', $item['description']);
  }
  return theme('node_add_list', array('content' => $content));
}

/**
 * Replacement for node_add
 *
 * This just calls node_add() and switches title. This has to be done here to work always
 */
function i18ncontent_node_add($type) {
  global $user;

  $types = node_type_get_types();
  $node = (object) array('uid' => $user->uid, 'name' => (isset($user->name) ? $user->name : ''), 'type' => $type, 'language' => LANGUAGE_NONE);
  drupal_set_title(t('Create @name', array('@name' => i18ncontent_translate($types[$type], 'name'))), PASS_THROUGH);
  $output = drupal_get_form($type . '_node_form', $node);

  return $output;
}

/**
 * Fetch default source for node type help
 */
function i18ncontent_node_help_source($type) {
  $context = i18nstrings_context("nodetype:type:$type:help");
  $source = i18nstrings_get_source($context);
  return $source;
}

/**
 * Shorthand for translating node type strings
 * 
 * @param $type
 *   Node type name or full object
 */
function i18ncontent_translate($type, $property, $source = NULL, $options = array()) {
  if (is_object($type)) {
    $source = $type->$property;
    $type = $type->type;
  }
  return i18nstrings_translate(array('nodetype', 'type', $type, $property), $source, $options);
}