<?php
// $Id: i18n.module,v 1.41.2.49.2.1 2010/09/14 11:30:30 jareyero Exp $

/**
 * @file
 * Internationalization (i18n) module - Field handling
 * 
 * Notes:
 * - Field titles are already translated with t(), which is a pity, but nothing to do here
 */



/**
 * Implements hook_locale().
 */
function i18n_field_locale($op = 'groups', $group = NULL) {
  switch ($op) {
    case 'groups':
      return array('field' => t('Fields'));
    case 'info':
      // @todo To be implemented
      //$info['field']['refresh callback'] = 'i18n_field_locale_refresh';
      $info['field']['format'] = FALSE;
      return $info;
  }
}

/**
 * Locale refresh callback
 * 
 * // @todo To be implemented
 */
function i18n_field_locale_refresh() {
  
  return FALSE;
}

/**
 * Implements hook_field_attach_form().
 * 
 * After the form fields are built
 */
function i18n_field_field_attach_form($entity_type, $entity, $form, $form_state, $langcode) {
}

/**
 * Implements hook_field_info_alter().
 * 
 * Cached, invoked only after field info is rebuilt
 */
function i18n_field_field_info_alter(&$info) {
}

/**
 * Implements hook_field_widget_info_alter()
 * 
 * Cached, invoked only after widget info is rebuilt
 */
function i18n_field_field_widget_info_alter(&$info) {
}

/**
 * Implements hook_field_widget_properties_alter().
 * 
 * This is called for the entity edit form and for the fields edit form
 */
function i18n_field_field_widget_properties_alter(&$widget, $context) {
  // Skip the node type edit fields by checking for existing entity
  if (!empty($context['entity']) && !empty($widget['module']) && function_exists($function = $widget['module'] . '_field_widget_form')) {
    $widget['module'] = 'i18n_field';
    $widget['i18n_field_callbacks'][] = $function;
  }
}

function i18n_field_field_extra_fields_display_alter(&$displays, $context) {
  
}

/**
 * Implements hook_field_display_alter().
 * 
 * Called only when refreshing cache
 */
function i18n_field_field_display_alter(&$display, $context) {

}

function i18n_field_field_storage_info_alter(&$info) {

}

/**
 * Field API callback to rewrite field element
 * 
 * Translate:
 * - Description (help)
 * - Default value
 * @see field_default_form()
 */
function i18n_field_field_widget_form($form, $form_state, $field, $instance, $langcode, $items, $delta, $element) {
  global $language;
  // The field language may affect some variables (default) but not others (description will be in current page language)
  $langcode = empty($element['#language']) || $element['#language'] == LANGUAGE_NONE ? $language->language : $element['#language']; 
  $delta = $element['#delta'];

  $translate = array(
    'description' => array('filter' => 'field_filter_xss'),
    //'default_value' => array('langcode' => $langcode),
  );

  foreach ($translate as $property => $options) {
    if (!empty($instance[$property])) {
      $string = is_array($instance[$property]) ? $instance[$property][$delta]['value'] : $instance[$property];
      $element['#' . $property] = i18nstrings_translate(array('field', $instance['bundle'], $instance['field_name'], $property), $string, $options);
    }    
  }
  // Translate default value if exists and the current value is the default
  if (i18n_field_translatable_default($field) && !empty($instance['default_value'][$delta]['value']) && !empty($items[$delta]['value']) && $instance['default_value'][$delta]['value'] === $items[$delta]['value']) {
    $items[$delta]['value'] = i18nstrings_translate(array('field', $instance['bundle'], $instance['field_name'], 'default_value'), $items[$delta]['value'], array('langcode' => $langcode));
  }
  // Redirect through original module_field_widget_form()
  if (!empty($instance['widget']['i18n_field_callbacks'])) {
    foreach ($instance['widget']['i18n_field_callbacks'] as $function) {
      $element = $function($form, $form_state, $field, $instance, $langcode, $items, $delta, $element);
    }
  }
  return $element;
}

/**
 * Implements hook_field_create_instance();
 */
function i18n_field_field_create_instance($instance) {
  i18n_field_instance_update_strings($instance);
}

/**
 * Implements hook_field_delete_instance();
 */
function i18n_field_field_delete_instance($instance) {
  foreach (array('description', 'default_value') as $property) {
    i18nstrings_remove(array('field', $instance['bundle'], $instance['field_name'], $property));
  }
}

/**
 * Implements hook_field_update_instance();
 */
function i18n_field_field_update_instance($instance, $prior_instance) {
  i18n_field_instance_update_strings($instance);
}

/**
 * Update field instance strings
 */
function i18n_field_instance_update_strings($instance) {
  if (isset($instance['description'])) {
    i18nstrings_update(array('field', $instance['bundle'], $instance['field_name'], 'description'), $instance['description']);
  }
  // Only for text field types
  if (isset($instance['default_value']) && i18n_field_translatable_default($instance['field_name'])) {
    $format = isset($instance['default_value'][0]['format']) ? $instance['default_value'][0]['format'] : NULL;
    i18nstrings_update(array('field', $instance['bundle'], $instance['field_name'], 'default_value'), $instance['default_value'][0]['value'], array('format' => $format));
  }
}

/**
 * Check whether this field type has translatable defaults
 * 
 * @param $field
 *   Full field data array or field name
 */
function i18n_field_translatable_default($field) {
  $field = is_array($field) ? $field : field_info_field($field);
  return in_array($field['type'], array('text', 'text_long', 'text_with_summary'));
}