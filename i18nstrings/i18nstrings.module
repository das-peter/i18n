<?php
// $Id: i18nstrings.module,v 1.8.2.56 2010/08/12 02:06:20 mirodietiker Exp $

/**
 * @file
 * Internationalization (i18n) package - translatable strings.
 *
 * Object oriented string translation using locale and textgroups. As opposed to core locale strings,
 * all strings handled by this module will have a unique id (name), composed by several parts
 *
 * A string name or string id will have the form 'textgroup:type:objectid:property'. Examples:
 *
 * - 'profile:field:profile_name:title', will be the title for the profile field 'profile_name'
 * - 'taxonomy:term:tid:name', will be the name for the taxonomy term tid
 * - 'views:view_name:display_id:footer', footer text
 *
 * Notes:
 * - The object id must be an integer. This is intended for quick indexing of some properties
 *
 * Some concepts
 * - Textgroup. Group the string belongs to, defined by locale hook.
 * - Location. Unique id of the string for this textgroup.
 * - Name. Unique absolute id of the string: textgroup + location.
 * - Context. Object with textgroup, type, objectid, property.
 *
 * Default language
 * - Default language may be English or not. It will be the language set as default.
 *   Source strings will be stored in default language.
 * - In the traditional i18n use case you shouldn't change the default language once defined.
 *
 * Default language changes
 * - You might result in the need to change the default language at a later point.
 * - Enabling translation of default language will curcumvent previous limitations.
 * - Check i18nstrings_translate_langcode() for more details.
 *
 * The API other modules to translate/update/remove user defined strings consists of
 *
 * @see i18nstrings($name, $string, $langcode)
 * @see i18nstrings_update($name, $string, $format)
 * @see i18nstrings_remove($name, $string)
 *
 * @author Jose A. Reyero, 2007
 */

/**
 * Translated string is current.
 */
define('I18NSTRINGS_STATUS_CURRENT', 0);

/**
 * Translated string needs updating as the source has been edited.
 */
define('I18NSTRINGS_STATUS_UPDATE', 1);

/**
 * Source string is obsoleted, cannot be found anymore. To be deleted.
 */
define('I18NSTRINGS_STATUS_DELETE', 2);

/**
 * Get textgroup handler
 */
function i18nstrings_textgroup($textgroup) {
  $groups = &drupal_static(__FUNCTION__);
  if (!isset($groups[$textgroup])) {
    $class = i18nstrings_info($textgroup, 'class', 'i18nstrings_default');
    $groups[$textgroup] = new $class($textgroup);
  }
  return $groups[$textgroup];
}

/**
 * Implements hook_help().
 */
function i18nstrings_help($path, $arg) {
  switch ($path) {
    case 'admin/help#i18nstrings':
      $output = '<p>' . t('This module adds support for other modules to translate user defined strings. Depending on which modules you have enabled that use this feature you may see different text groups to translate.') . '<p>';
      $output .= '<p>' . t('This works differently to Drupal standard localization system: The strings will be translated from the default language (which may not be English), so changing the default language may cause all these translations to be broken.') . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . t('To search and translate strings, use the <a href="@translate-interface">translation interface</a> pages.', array('@translate-interface' => url('admin/config/regional/translate'))) . '</li>';
      $output .= '<li>' . t('If you are missing strings to translate, use the <a href="@refresh-strings">refresh strings</a> page.', array('@refresh-strings' => url('admin/build/translate/refresh'))) . '</li>';
      $output .= '</ul>';
      $output .= '<p>' . t('Read more on the <em>Internationalization handbook</em>: <a href="http://drupal.org/node/313293">Translating user defined strings</a>.') . '</p>';
      return $output;

    case 'admin/build/translate/refresh':
      $output = '<p>' . t('On this page you can refresh and update values for user defined strings.') . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . t('Use the refresh option when you are missing strings to translate for a given text group. All the strings will be re-created keeping existing translations.') . '</li>';
      $output .= '<li>' . t('Use the update option when some of the strings had been previously translated with the localization system, but the translations are not showing up for the configurable strings.') . '</li>';
      $output .= '</ul>';
      $output .= '<p>' . t('To search and translate strings, use the <a href="@translate-interface">translation interface</a> pages.', array('@translate-interface' => url('admin/config/regional/translate'))) . '</p>';
      $output .= '<p>' . t('<strong>Important:</strong> To configure which Input formats are safe for translation, visit the <a href="@configure-strings">configure strings</a> page before refreshing your strings.', array('@configure-strings' => url('admin/config/regional/i18n/strings'))) . '</p>';
      return $output;

    case 'admin/config/language':
      $output = '<p>' . t('<strong>Warning</strong>: Changing the default language may have unwanted effects on string translations. Read more about <a href="@i18nstrings-help">String translation</a>', array('@i18nstrings-help' => url('admin/help/i18nstrings'))) . '</p>';
      return $output;
    case 'admin/config/regional/i18n/strings':
      $output = '<p>' . t('When translating user defined strings that have an Input format associated, translators will be able to edit the text before it is filtered which may be a security risk for some filters. An obvious example is when using the PHP filter but other filters may also be dangerous.') . '</p>';
      $output .= '<p>' . t('As a general rule <strong>do not allow any filtered text to be translated unless the translators already have access to that Input format</strong>. However if you are doing all your translations through this site\'s translation UI or the Localization client, and never importing translations for other textgroups than <i>default</i>, filter access will be checked for translators on every translation page.') . '</p>';
      $output .= '<p>' . t('<strong>Important:</strong> After disallowing some Input format, use the <a href="@refresh-strings">refresh strings</a> page so forbidden strings are deleted and not allowed anymore for translators.', array('@refresh-strings' => url('admin/build/translate/refresh'))) . '</p>';
      return $output;
    case 'admin/config/filters':
      return '<p>' . t('After updating your Input formats do not forget to review the list of formats allowed for string translations on the <a href="@configure-strings">configure translatable strings</a> page.', array('@configure-strings' => url('admin/config/regional/i18n/strings'))) . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function i18nstrings_menu() {
  $items['admin/config/regional/translate/i18nstrings'] = array(
    'title' => 'Strings',
    'description' => 'Refresh user defined strings.',
    'weight' => 20,
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('i18nstrings_admin_refresh_form'),
    'file' => 'i18nstrings.admin.inc',
    'access arguments' => array('translate interface'),
  );
  $items['admin/config/regional/language/i18nstrings'] = array(
    'title' => 'String translation',
    'weight' => 20,
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('i18nstrings_admin_settings'),
    'file' => 'i18nstrings.admin.inc',
    'access arguments' => array('administer filters'),
  );

  // AJAX callback path for strings.
  $items['i18nstrings/save'] = array(
    'title' => 'Save string',
    'page callback' => 'i18nstrings_l10n_client_save_string',
    'access arguments' => array('use on-page translation'),
    'file' => 'i18nstrings.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 *
 * Add English language in some string forms when it is not the default.
 */
function i18nstrings_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'locale_translate_export_po_form':
    case 'locale_translate_import_form':
      $names = locale_language_list('name', TRUE);
      if (language_default('language') != 'en' && array_key_exists('en', $names)) {
        if (isset($form['export'])) {
          $form['export']['langcode']['#options']['en'] = $names['en'];
        }
        else {
          $form['import']['langcode']['#options'][t('Already added languages')]['en'] = $names['en'];
        }
      }
      break;

    case 'locale_translate_edit_form':
      // Restrict filter permissions and handle validation and submission for i18n strings
      $context = db_select('i18n_strings', 'i18ns')
        ->fields('i18ns')
        ->condition('lid', $form['lid']['#value'])
        ->execute()
        ->fetchObject();
      if ($context) {
        $form['i18nstrings_context'] = array('#type' => 'value', '#value' => $context);
        // Replace validate callback
        $form['#validate'] = array('i18nstrings_translate_edit_form_validate');
        if ($context->format) {
          $format = filter_formats($context->format);
          $disabled = !filter_access($context->format);
          if ($disabled) {
            drupal_set_message(t('This string uses the %name input format. You are not allowed to translate or edit texts with this format.', array('%name' => $format->name)), 'warning');
          }
          foreach (element_children($form['translations']) as $langcode) {
            $form['translations'][$langcode]['#disabled'] = $disabled;
          }
          $form['translations']['format_help'] = array(
            '#type' => 'item',
            '#title' => t('Input format: @name', array('@name' => $format->name)),
            '#value' => theme('filter_tips', _filter_tips($context->format, FALSE))
          );
          $form['submit']['#disabled'] = $disabled;
        }
      }
      // Aditional submit callback
      $form['#submit'][] = 'i18nstrings_translate_edit_form_submit';
      break;
    case 'l10n_client_form':
      $form['#action'] = url('i18nstrings/save');
      break;
  }
}

/**
 * Process string editing form validations.
 *
 * If it is an allowed format, skip default validation, the text will be filtered later
 */
function i18nstrings_translate_edit_form_validate($form, &$form_state) {
  $context = $form_state['values']['i18nstrings_context'];
  if (empty($context->format)) {
    // If not input format use regular validation for all strings
    $copy_state = $form_state;
    $copy_state['values']['textgroup'] = 'default';
    locale_translate_edit_form_validate($form, $copy_state);
  }
  elseif (!filter_access($context->format)) {
    form_set_error('translations', t('You are not allowed to translate or edit texts with this input format.'));
  }
}

/**
 * Process string editing form submissions.
 *
 * Mark translations as current.
 */
function i18nstrings_translate_edit_form_submit($form, &$form_state) {
  $lid = $form_state['values']['lid'];
  foreach ($form_state['values']['translations'] as $key => $value) {
    if (!empty($value)) {
      // An update has been made, so we assume the translation is now current.
      db_update('locales_target')
        ->fields(array('i18n_status' => I18NSTRINGS_STATUS_CURRENT))
        ->condition('lid', $lid)
        ->condition('language', $key)
        ->execute();
    }
  }
}

/**
 * Check if translation is required for this language code.
 *
 * Translation is required when default language is different from the given
 * language, or when default language translation is explicitly enabled.
 *
 * No UI is provided to enable translation of default language. On the other
 * hand, you can enable/disable translation for a specific language by adding
 * the following to your settings.php
 *
 * @param $langcode
 * @param $reset
 *   Whether to reset the internal cache for the translated langcode.
 *
 * @code
 *   // Enable translation of specific language. Language code is 'xx'
 *   $conf['i18nstrings_translate_langcode_xx'] = TRUE;
 *   // Disable translation of specific language. Language code is 'yy'
 *   $conf['i18nstrings_translate_langcode_yy'] = FALSE;
 * @endcode
 */
function i18nstrings_translate_langcode($langcode, $reset = FALSE) {
  $translate = &drupal_static(__FUNCTION__ , array(), $reset);
  if (!isset($translate[$langcode])) {
    $translate[$langcode] = variable_get('i18nstrings_translate_langcode_' . $langcode, language_default('language') != $langcode);
  }
  return $translate[$langcode];
}

/**
 * Translate object properties.
 * 
 * @param $options
 *   An associative array of additional options
 */
function i18nstrings_translate_object($context, &$object, $properties = array(), $options = array()) {
  global $language;

  $langcode = $langcode ? $langcode : $language->language;
  // If language is default, just return.
  if (i18nstrings_translate_langcode($langcode)) {
    $context = i18nstrings_context($context);
    // @ TODO Object prefetch
    foreach ($properties as $property) {
      $context->property = $property;
      $context->location = i18nstrings_location($context);
      if (!empty($object->$property)) {
        $object->$property = i18nstrings_translate_string($context, $object->$property, $langcode);
      }
    }
  }
}

/**
 * Update / create object properties.
 */
function i18nstrings_update_object($context, $object, $properties = array()) {
  $context = i18nstrings_context($context);
  foreach ($properties as $property) {
    $context->property = $property;
    $context->location = i18nstrings_location($context);
    if (!empty($object->$property)) {
      i18nstrings_update_string($context, $object->$property);
    }
  }
}

/**
 * Update / create translation source for user defined strings.
 *
 * @param $name
 *   Textgroup and location glued with ':'.
 * @param $string
 *   Source string in default language. Default language may or may not be English.
 * @param $options
 *   Array with additional options:
 *   - 'format', String format if the string has input format
 *   - 'messages', Whether to print out status messages
 */
function i18nstrings_update($name, $string, $options = array()) {
  list($textgroup, $context) = i18nstrings_context($name);
  return i18nstrings_textgroup($textgroup)->update($context, $string, $options);
}

/**
 * Convert string name into textgroup and string context
 * 
 * @param $name
 *   Array or string concatenated with ':' that contains textgroup and string context
 */
function i18nstrings_context($name) {
  $parts = is_array($name) ? $name : explode(':', $name);
  $textgroup = array_shift($parts);
  $context = $parts;
  return array($textgroup, $context);
}

/**
 * Get textgroup info, from hook_locale('info')
 *
 * @param $group
 *   Text group name.
 * @param $default
 *   Default value to return for a property if not set.
 */
function i18nstrings_info($group = NULL, $property = NULL, $default = NULL) {
  $info = &drupal_static(__FUNCTION__ , NULL);

  if (!isset($info)) {
    $info = module_invoke_all('locale', 'info');
  }

  if ($group && $property) {
    return isset($info[$group][$property]) ? $info[$group][$property] : $default;
  }
  elseif ($group) {
    return isset($info[$group]) ? $info[$group] : array();
  }
  else {
    return $info;
  }
}

/**
 * @ingroup i18napi
 * @{
 */

/**
 * Translate or update user defined string.
 *
 * @param $name
 *   Textgroup and context glued with ':'.
 * @param $default
 *   String in default language. Default language may or may not be English.
 * @param $options
 *   An associative array of additional options, with the following keys:
 *   - 'langcode' (defaults to the current language) The language code to translate to a language other than what is used to display the page.
 *   - 'filter' Formatting or filtering callback to apply to the translated string only
 *   - 'callback' Callback to apply to the result (both to translated or untranslated string
 *   - 'update' (defaults to FALSE) Whether to update source table
 *   - 'translate' (defaults to TRUE) Whether to return a translation
 *
 * @return $string
 *   Translated string, $string if not found
 */
function i18nstrings($name, $string, $options = array()) {
  $options += array('translate' => TRUE, 'update' => FALSE);
  if ($options['update']) {
    $result = i18nstrings_update($name, $string, $options);
  }
  if ($options['translate']) {
    $result = i18nstrings_translate($name, $string, $options);
  }
  return $result;
}

/**
 * Get translation for user defined string.
 *
 * This function is intended to return translations for plain strings that have NO input format
 *
 * @param $name
 *   Textgroup and context glued with ':'
 * @param $string
 *   String in default language
 * @param $options
 *   An associative array of additional options, with the following keys:
 *   - 'langcode' (defaults to the current language) The language code to translate to a language other than what is used to display the page.
 *   - 'filter' Formatting or filtering callback to apply to the translated string only
 *   - 'callback' Callback to apply to the result (both to translated or untranslated string
 */
function i18nstrings_translate($name, $string, $options = array()) {
  $options += array('langcode' => i18nstrings_language()->language);
  list($textgroup, $context) = i18nstrings_context($name);
  // If language is default, just return
  if (i18nstrings_translate_langcode($options['langcode'])) {
    $translation = i18nstrings_textgroup($textgroup)->translate($context, $string, $options);
    // Add for l10n client if available, we pass translation object that contains the format
    i18nstrings_l10n_client_add($translation, $options);
    return i18nstrings_format($translation, $options);
  }
  else {
    return i18nstrings_format($string, $options);
  }
}

/**
 * Format the resulting translation or the default string applying callbacks
 * 
 * There's a hidden variable, 'i18nstrings_debug', that when set to TRUE will display additional info
 */
function i18nstrings_format($i18nstring, $options = array()) {
  static $debug;
  if (!isset($debug)) {
    $debug = variable_get('i18nstrings_debug', FALSE);
  }
  if (is_string($i18nstring)) {
    $string = $i18nstring;
  }
  elseif (!empty($i18nstring->translation)) {
    $string = $i18nstring->translation;
    if (!empty($i18nstring->format)) {
      $string = check_markup($string, $i18nstring->format, $options['langcode'], FALSE);
    }
    if (isset($options['filter'])) {
      $string = call_user_func($options['filter'], $string);
    }
  }
  else {
    $string = isset($i18nstring->source) ? $i18nstring->source : '';
  }
  // Apply callback to any of the strings
  if ($string && isset($options['callback'])) {
    $string = call_user_func($options['callback'], $string);
  }
  // Add debug information if enabled
  if ($debug && is_object($i18nstring)) {
    $info = array($i18nstring->textgroup, $i18nstring->context);
    if (!empty($i18nstring->format)) {
      $info[] = $i18nstring->format;
    }
    $string .= ' [' . implode(':', $info) . ']';
  }
  return $string;
}

/**
 * Get the current language to translate to. Always get a language object
 */
function i18nstrings_language() {
  global $language;
  return !empty($language) ? $language : language_default();
}

/**
 * Get filtered translation.
 *
 * This function is intended to return translations for strings that have an input format
 *
 * @param $name
 *   Full string id
 * @param $default
 *   Default string to return if not found, already filtered
 * @param $options
 *   Array with additional options.
 */
function i18nstrings_text($name, $default, $options = array()) {
  $options += array('format' => filter_fallback_format());
  return i18nstrings_translate($name, $default, $options);
}

/**
 * Translation for plain string. In case it finds a translation it applies check_plain() to it
 *
 * @param $name
 *   Full string id
 * @param $default
 *   Default string to return if not found
 * @param $options
 *   Array with additional options
 */
function i18nstrings_string($name, $default, $options = array()) {
  $options += array('filter' => 'check_plain');
  return i18nstrings_translate($name, $default, $options);
}

/**
 * Remove source and translations for user defined string.
 *
 * Though for most strings the 'name' or 'string id' uniquely identifies that string,
 * there are some exceptions (like profile categories) for which we need to use the
 * source string itself as a search key.
 *
 * @param $context
 *   String context
 * @param $string
 *   Optional source string (string in default language).
 */
function i18nstrings_remove($name, $string = NULL, $options = array()) {
  list($textgroup, $context) = i18nstrings_context($name);
  $status = i18nstrings_textgroup($textgroup)->remove($context, $string, $options);
  return $status;
}



/**
 * @} End of "ingroup i18napi".
 */

/*** l10n client related functions ***/

/**
 * Add string to l10n strings if enabled and allowed for this string
 *
 * @param $context
 *   String object
 */
function i18nstrings_l10n_client_add($context, $options) {
  global $language;

  // If current language add to l10n client list for later on page translation.
  // If langcode translation was disabled we are not supossed to reach here.
  if (($language->language == $context->language) && function_exists('l10_client_add_string_to_page')) {
    $translation = !empty($context->translation) ? $context->translation : TRUE;
    if (!$context->source == FALSE) {
      // This means it is a plain string, we don't need to check the format
      l10_client_add_string_to_page(FALSE, $context->translation, $context->textgroup);
    }
    else {
      // Additional checking for input format, if its a dangerous one we ignore the string
      $source = i18nstrings_get_source($context);
      if (!empty($source) && (i18nstrings_allowed_format($source->format) || filter_access($source->format))) {
        l10_client_add_string_to_page($string, $translation, $context->textgroup);
      }
    }
  }
}
