<?php
// $Id: i18nstrings.module,v 1.8.2.56 2010/08/12 02:06:20 mirodietiker Exp $

/**
 * @file
 * Internationalization (i18n) package - translatable strings.
 *
 * Object oriented string translation using locale and textgroups. As opposed to core locale strings,
 * all strings handled by this module will have a unique id (name), composed by several parts
 *
 * A string name or string id will have the form 'textgroup:type:objectid:property'. Examples:
 *
 * - 'profile:field:profile_name:title', will be the title for the profile field 'profile_name'
 * - 'taxonomy:term:tid:name', will be the name for the taxonomy term tid
 * - 'views:view_name:display_id:footer', footer text
 *
 * Notes:
 * - The object id must be an integer. This is intended for quick indexing of some properties
 *
 * Some concepts
 * - Textgroup. Group the string belongs to, defined by locale hook.
 * - Location. Unique id of the string for this textgroup.
 * - Name. Unique absolute id of the string: textgroup + location.
 * - Context. Object with textgroup, type, objectid, property.
 *
 * Default language
 * - Default language may be English or not. It will be the language set as default.
 *   Source strings will be stored in default language.
 * - In the traditional i18n use case you shouldn't change the default language once defined.
 *
 * Default language changes
 * - You might result in the need to change the default language at a later point.
 * - Enabling translation of default language will curcumvent previous limitations.
 * - Check i18nstrings_translate_langcode() for more details.
 *
 * The API other modules to translate/update/remove user defined strings consists of
 *
 * @see i18nstrings($name, $string, $langcode)
 * @see i18nstrings_update($name, $string, $format)
 * @see i18nstrings_remove($name, $string)
 *
 * @author Jose A. Reyero, 2007
 */

/**
 * Translated string is current.
 */
define('I18NSTRINGS_STATUS_CURRENT', 0);

/**
 * Translated string needs updating as the source has been edited.
 */
define('I18NSTRINGS_STATUS_UPDATE', 1);

/**
 * Source string is obsoleted, cannot be found anymore. To be deleted.
 */
define('I18NSTRINGS_STATUS_DELETE', 2);

/**
 * Implements hook_help().
 */
function i18nstrings_help($path, $arg) {
  switch ($path) {
    case 'admin/help#i18nstrings':
      $output = '<p>' . t('This module adds support for other modules to translate user defined strings. Depending on which modules you have enabled that use this feature you may see different text groups to translate.') . '<p>';
      $output .= '<p>' . t('This works differently to Drupal standard localization system: The strings will be translated from the default language (which may not be English), so changing the default language may cause all these translations to be broken.') . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . t('To search and translate strings, use the <a href="@translate-interface">translation interface</a> pages.', array('@translate-interface' => url('admin/config/regional/translate'))) . '</li>';
      $output .= '<li>' . t('If you are missing strings to translate, use the <a href="@refresh-strings">refresh strings</a> page.', array('@refresh-strings' => url('admin/build/translate/refresh'))) . '</li>';
      $output .= '</ul>';
      $output .= '<p>' . t('Read more on the <em>Internationalization handbook</em>: <a href="http://drupal.org/node/313293">Translating user defined strings</a>.') . '</p>';
      return $output;

    case 'admin/build/translate/refresh':
      $output = '<p>' . t('On this page you can refresh and update values for user defined strings.') . '</p>';
      $output .= '<ul>';
      $output .= '<li>' . t('Use the refresh option when you are missing strings to translate for a given text group. All the strings will be re-created keeping existing translations.') . '</li>';
      $output .= '<li>' . t('Use the update option when some of the strings had been previously translated with the localization system, but the translations are not showing up for the configurable strings.') . '</li>';
      $output .= '</ul>';
      $output .= '<p>' . t('To search and translate strings, use the <a href="@translate-interface">translation interface</a> pages.', array('@translate-interface' => url('admin/config/regional/translate'))) . '</p>';
      $output .= '<p>' . t('<strong>Important:</strong> To configure which Input formats are safe for translation, visit the <a href="@configure-strings">configure strings</a> page before refreshing your strings.', array('@configure-strings' => url('admin/config/regional/i18n/strings'))) . '</p>';
      return $output;

    case 'admin/config/language':
      $output = '<p>' . t('<strong>Warning</strong>: Changing the default language may have unwanted effects on string translations. Read more about <a href="@i18nstrings-help">String translation</a>', array('@i18nstrings-help' => url('admin/help/i18nstrings'))) . '</p>';
      return $output;
    case 'admin/config/regional/i18n/strings':
      $output = '<p>' . t('When translating user defined strings that have an Input format associated, translators will be able to edit the text before it is filtered which may be a security risk for some filters. An obvious example is when using the PHP filter but other filters may also be dangerous.') . '</p>';
      $output .= '<p>' . t('As a general rule <strong>do not allow any filtered text to be translated unless the translators already have access to that Input format</strong>. However if you are doing all your translations through this site\'s translation UI or the Localization client, and never importing translations for other textgroups than <i>default</i>, filter access will be checked for translators on every translation page.') . '</p>';
      $output .= '<p>' . t('<strong>Important:</strong> After disallowing some Input format, use the <a href="@refresh-strings">refresh strings</a> page so forbidden strings are deleted and not allowed anymore for translators.', array('@refresh-strings' => url('admin/build/translate/refresh'))) . '</p>';
      return $output;
    case 'admin/config/filters':
      return '<p>' . t('After updating your Input formats do not forget to review the list of formats allowed for string translations on the <a href="@configure-strings">configure translatable strings</a> page.', array('@configure-strings' => url('admin/config/regional/i18n/strings'))) . '</p>';
  }
}

/**
 * Implements hook_menu().
 */
function i18nstrings_menu() {
  $items['admin/build/translate/refresh'] = array(
    'title' => 'Refresh',
    'weight' => 20,
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'i18nstrings_admin_refresh_page',
    'file' => 'i18nstrings.admin.inc',
    'access arguments' => array('translate interface'),
  );
  $items['admin/config/regional/i18n/strings'] = array(
    'title' => 'String translation',
    'weight' => 20,
    'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('i18nstrings_admin_settings'),
    'file' => 'i18nstrings.admin.inc',
    'access arguments' => array('administer filters'),
  );

  // AJAX callback path for strings.
  $items['i18nstrings/save'] = array(
    'title' => 'Save string',
    'page callback' => 'i18nstrings_l10n_client_save_string',
    'access arguments' => array('use on-page translation'),
    'file' => 'i18nstrings.inc',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_form_alter().
 *
 * Add English language in some string forms when it is not the default.
 */
function i18nstrings_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'locale_translate_export_po_form':
    case 'locale_translate_import_form':
      $names = locale_language_list('name', TRUE);
      if (language_default('language') != 'en' && array_key_exists('en', $names)) {
        if (isset($form['export'])) {
          $form['export']['langcode']['#options']['en'] = $names['en'];
        }
        else {
          $form['import']['langcode']['#options'][t('Already added languages')]['en'] = $names['en'];
        }
      }
      break;

    case 'locale_translate_edit_form':
      // Restrict filter permissions and handle validation and submission for i18n strings
      $context = db_select('i18n_strings', 'i18ns')
        ->fields('i18ns')
        ->condition('lid', $form['lid']['#value'])
        ->execute()
        ->fetchObject();
      if ($context) {
        $form['i18nstrings_context'] = array('#type' => 'value', '#value' => $context);
        // Replace validate callback
        $form['#validate'] = array('i18nstrings_translate_edit_form_validate');
        if ($context->format) {
          $format = filter_formats($context->format);
          $disabled = !filter_access($context->format);
          if ($disabled) {
            drupal_set_message(t('This string uses the %name input format. You are not allowed to translate or edit texts with this format.', array('%name' => $format->name)), 'warning');
          }
          foreach (element_children($form['translations']) as $langcode) {
            $form['translations'][$langcode]['#disabled'] = $disabled;
          }
          $form['translations']['format_help'] = array(
            '#type' => 'item',
            '#title' => t('Input format: @name', array('@name' => $format->name)),
            '#value' => theme('filter_tips', _filter_tips($context->format, FALSE))
          );
          $form['submit']['#disabled'] = $disabled;
        }
      }
      // Aditional submit callback
      $form['#submit'][] = 'i18nstrings_translate_edit_form_submit';
      break;
    case 'l10n_client_form':
      $form['#action'] = url('i18nstrings/save');
      break;
  }
}

/**
 * Process string editing form validations.
 *
 * If it is an allowed format, skip default validation, the text will be filtered later
 */
function i18nstrings_translate_edit_form_validate($form, &$form_state) {
  $context = $form_state['values']['i18nstrings_context'];
  if (empty($context->format)) {
    // If not input format use regular validation for all strings
    $copy_state = $form_state;
    $copy_state['values']['textgroup'] = 'default';
    locale_translate_edit_form_validate($form, $copy_state);
  }
  elseif (!filter_access($context->format)) {
    form_set_error('translations', t('You are not allowed to translate or edit texts with this input format.'));
  }
}

/**
 * Process string editing form submissions.
 *
 * Mark translations as current.
 */
function i18nstrings_translate_edit_form_submit($form, &$form_state) {
  $lid = $form_state['values']['lid'];
  foreach ($form_state['values']['translations'] as $key => $value) {
    if (!empty($value)) {
      // An update has been made, so we assume the translation is now current.
      db_update('locales_target')
        ->fields(array('i18n_status' => I18NSTRINGS_STATUS_CURRENT))
        ->condition('lid', $lid)
        ->condition('language', $key)
        ->execute();
    }
  }
}

/**
 * Check if translation is required for this language code.
 *
 * Translation is required when default language is different from the given
 * language, or when default language translation is explicitly enabled.
 *
 * No UI is provided to enable translation of default language. On the other
 * hand, you can enable/disable translation for a specific language by adding
 * the following to your settings.php
 *
 * @param $langcode
 * @param $reset
 *   Whether to reset the internal cache for the translated langcode.
 *
 * @code
 *   // Enable translation of specific language. Language code is 'xx'
 *   $conf['i18nstrings_translate_langcode_xx'] = TRUE;
 *   // Disable translation of specific language. Language code is 'yy'
 *   $conf['i18nstrings_translate_langcode_yy'] = FALSE;
 * @endcode
 */
function i18nstrings_translate_langcode($langcode, $reset = FALSE) {
  $translate = &drupal_static(__FUNCTION__ , array(), $reset);
  if (!isset($translate[$langcode])) {
    $translate[$langcode] = variable_get('i18nstrings_translate_langcode_' . $langcode, language_default('language') != $langcode);
  }
  return $translate[$langcode];
}

/**
 * Get configurable string.
 *
 * The difference with i18nstrings() is that it doesn't use a default string, it will be retrieved too.
 *
 * This is used for source texts that we don't have stored anywhere else. I.e. for the content
 * types help text (i18ncontent module) there's no way we can override the default (configurable) help text
 * so what we do is to make it blank in the configuration (so node module doesn't display it)
 * and then we provide that help text for *all* languages, out from the locales tables.
 *
 * As the original language string will be stored in locales too so it should be only used when updating.
 */
function i18nstrings_default($name, $langcode = NULL, $default = '') {
  global $language;

  $langcode = $langcode ? $langcode : $language->language;
  $translation = NULL;

  if ($translation = i18nstrings_translate_string($name, $default, $langcode)) {
    return $translation;
  }
  elseif ($source = i18nstrings_get_source()) {
    return $source->source;
  }
}

/**
 * Debug utility. Marks the translated strings.
 */
function _i18nstrings($name, $string, $langcode = NULL) {
  $context = i18nstrings_context($name, $string, $langcode);
  $context = implode('/', (array) $context);
  return i18nstrings($name, $string, $langcode) . '[T:' . $string . '(' . $context . ')]';
}

/**
 * Get translation for user defined string.
 *
 * This function is intended to return translations for plain strings that have NO input format
 *
 * @param $name
 *   Textgroup and location glued with ':'
 * @param $string
 *   String in default language
 * @param $langcode
 *   Language code to get translation for
 *
 * @return
 *   Translated string if available, otherwise $string
 */
function i18nstrings_translate_string($name, $string, $langcode) {
  $context = i18nstrings_context($name, $string, $langcode);
  // Search for existing translation (result will be cached in this function call)
  $translation = i18nstrings_get_string($context);
  // Add for l10n client if available
  i18nstrings_l10n_client_add($context);

  return isset($translation->translation) ? $translation->translation : $string;
}


/**
 * Translate object properties.
 */
function i18nstrings_translate_object($context, &$object, $properties = array(), $langcode = NULL) {
  global $language;

  $langcode = $langcode ? $langcode : $language->language;
  // If language is default, just return.
  if (i18nstrings_translate_langcode($langcode)) {
    $context = i18nstrings_context($context);
    // @ TODO Object prefetch
    foreach ($properties as $property) {
      $context->property = $property;
      $context->location = i18nstrings_location($context);
      if (!empty($object->$property)) {
        $object->$property = i18nstrings_translate_string($context->location, $object->$property, $langcode);
      }
    }
  }
}

/**
 * Update / create object properties.
 */
function i18nstrings_update_object($context, $object, $properties = array()) {
  $context = i18nstrings_context($context);
  foreach ($properties as $property) {
    $context->property = $property;
    $context->location = i18nstrings_location($context);
    if (!empty($object->$property)) {
      i18nstrings_update_string($context, $object->$property);
    }
  }
}

/**
 * Update / create / remove string.
 *
 * @param $name
 *   String context.
 * @pram $string
 *   New value of string for update/create. May be empty for removing.
 * @param $format
 *   Input format, that must have been checked against allowed formats for translation
 * @return status
 *   SAVED_UPDATED | SAVED_NEW | SAVED_DELETED
 */
function i18nstrings_update_string($name, $string, $format = 0) {
  $context = i18nstrings_context($name, $string, NULL, $format);

  if (isset($string)) {
    return i18nstrings_add_string($context, $string, $format);
  }
  else {
    return i18nstrings_remove_string($context);
  }
}

/**
 * Update string translation.
 */
function i18nstrings_update_translation($context, $langcode, $translation) {
  if ($source = i18nstrings_get_source($context, $translation)) {
    db_insert('locales_target')
      ->fields(array(
        'lid' => $source->lid,
        'language' => $langcode,
        'translation' => $translation,
      ))
      ->execute();
  }
}

/**
 * Add source string to the locale tables for translation.
 *
 * It will also add data into i18n_strings table for faster retrieval and indexing of groups of strings.
 * Some string context doesn't have a numeric oid (I.e. content types), it will be set to zero.
 *
 * This function checks for already existing string without context for this textgroup and updates it accordingly.
 * It is intended for backwards compatibility, using already created strings.
 *
 * @param $name
 *   Textgroup and location glued with ':'
 * @param $string
 *   Source string (string in default language)
 * @param $format
 *   Input format, for strings that will go through some filter
 * @return
 *   Update status.
 */
function i18nstrings_add_string($name, $string, $format = NULL) {
  $context = i18nstrings_context($name, $string, NULL, $format);

  // Check if we have a source string.
  $source = i18nstrings_get_source($context);
  // Default return status if nothing happens
  $status = -1;
  // The string may not be allowed for translation depending on its format.
  if (isset($format) && !i18nstrings_allowed_format($format)) {
    if ($source) {
      // The format may have changed and it's not allowed now, delete the source string
      return i18nstrings_remove_string($context);
    }
    else {
      // We just don't do anything
      return $status;
    }
  }
  if ($source) {
    if ($source->source != $string) {
      // String has changed
      db_update('locales_source')
        ->fields(array(
          'source' => $string,
      		'location' => $context->location,
        ))
        ->condition('lid', $source->lid)
        ->execute();
      db_update('locales_target')
        ->fields(array('i18n_status' => I18NSTRINGS_STATUS_UPDATE))
        ->condition('lid', $source->lid)
        ->execute();
      $status = SAVED_UPDATED;
    }
    elseif ($source->location != $location) {
      // It's not changed but it didn't have location set
      db_update('locales_source')
        ->fields(array('location' => $location))
        ->condition('lid', $source->lid)
        ->execute();
      $status = SAVED_UPDATED;
    }
    // Complete metadata.
    $context->lid = $source->lid;
  }
  else {
    $context->lid = db_insert('locales_source')
      ->fields(array(
        'location' => $location,
      	'source' => $string,
        'textgroup' => $context->textgroup,
        'version' => 1,
      ))
      ->execute();
    // Clear locale cache so this string can be added in a later request.
    cache_clear_all('locale:' . $context->textgroup . ':', 'cache', TRUE);
    // Create string.
    $status = SAVED_NEW;
  }
  // Update metadata
  i18nstrings_save_context($context);
  return $status;
}

/**
 * Check if input format is allowed for translation
 *
 * @param $format
 *   Input format key or NULL if not format (will be allowed)
 */
function i18nstrings_allowed_format($format = NULL) {
  $allowed_formats = variable_get('i18nstrings_allowed_formats', array(variable_get('filter_default_format', 1)));
  return !isset($format) || in_array($format, $allowed_formats);
}

/**
 * Save / update context metadata.
 *
 * There seems to be a race condition sometimes so skip errors, #277711
 */
function i18nstrings_save_context($context) {
  if ($source = i18nstrings_get_source($context)) {
    $context->lid = $source->lid;
    drupal_write_record('locales_source', $context, 'lid');
    drupal_write_record('i18n_strings', $context, 'lid');
    if ($context->source !== $source->source) {
      // Mark translations as need update
      db_update('locales_target')
        ->condition('lid', $context->lid)
        ->fields(array('i18n_status' => I18NSTRINGS_STATUS_UPDATE))
        ->execute();
    }
    return SAVED_UPDATED;
  }
  else {
    drupal_write_record('locales_source', $context, 'lid');
    drupal_write_record('i18n_strings', $context, 'lid');
    return SAVED_NEW;
  }
}

/**
 * Get source string provided a string context.
 *
 * @param $context
 *   Context string or object.
 * @return
 *   Context object if it exists.
 */
function i18nstrings_get_source($context) {
  return db_select('locales_source', 'l')
    ->fields('l')
    ->condition('l.location', $context->location)
    ->execute()->fetchObject();
}

/**
 * Get string for a language.
 *
 * @param $context
 *   Context string or object.
 * @param $langcode
 *   Language code to retrieve string for.
 *
 * @return
 *   - Translation string as object if found.
 *   - FALSE if no translation
 *
 */
function i18nstrings_get_string($context) {
  // First try the cache
  if ($translation = i18nstrings_cache_get($context) && isset($translation->translation)) {
    return $translation;
  }
  elseif ($translation = i18nstrings_translate_query($context)->execute()->fetchObject()) {
    $context->translation = $translation->translation;
    $context->lid = $translation->lid;
    $context->format = $translation->format;
    i18nstrings_cache_set($context);
    return $context;
  }
  else {
    // Set on the cache so we don't search again
    i18nstrings_cache_set($context);
    return NULL;
  }
}

/**
 * Get translation from the database. Full object with input format.
 *
 * This one doesn't return anything if we don't have the full i18n strings data there
 * to prevent missing data resulting in missing input formats
 */
function i18nstrings_get_translation($context) {
  $translation = i18nstrings_get_string($context);
  if ($translation && isset($translation->translation)) {
    return $translation;
  }
  else {
    return NULL;
  }
}

/**
 * Remove string for a given context.
 */
function i18nstrings_remove_string($context) {
  if ($source = i18nstrings_get_source($context)) {
    db_delete('locales_target')->condition('lid', $source->lid)->execute();
    db_delete('i18n_strings')->condition('lid', $source->lid)->execute();
    db_delete('locales_source')->condition('lid', $source->lid)->execute();
    cache_clear_all('locale:'. $context->textgroup .':', 'cache', TRUE);
    return SAVED_DELETED;
  }
}

/**
 * Convert context string in a context object.
 *
 * Example:
 *   'taxonomy:term:1:name'
 *
 * will become a $context object where
 *   $context->textgroup = 'taxonomy';
 *   $context->type = 'term';
 *   $context->objectid = 1;
 *   $context->property = 'name';
 *
 * Examples:
 *  'taxonomy:title' -> (taxonomy, title, 0, 0)
 *  'nodetype:type:[type]:name'
 *  'nodetype:type:[type]:description'
 *  'profile:category'
 *  'profile:field:[fid]:title'
 *
 * When we don't have 'objectid' or 'property', like for 'profile:category' we need to use
 * the string itself as a search key, so we store it in $context->source
 *
 * If the name has more than 4 elements glued by ':' we add the remaining ones into property
 *
 * @param $context
 *   Context string or object.
 * @param $string
 *   For some textgroups and objects that don't have ids we use the string itself as index.
 * @param $langcode
 *   Language code to be translated to
 * @return
 *   Context object with textgroup, type, objectid, property and location names.
 */
function i18nstrings_context($name, $string = NULL, $langcode = NULL, $format = 0) {
  global $language;
  // Context may be already an object.
  if (is_object($name)) {
    return $name;
  }
  else {
    // Split the name in four parts, remaining elements will be in the last one
    $context = new Stdclass();
    // Location will be the full string name
    $context->location = $name;
    // Now we take out 'textgroup'. Context will be the remaining string
    $parts = explode(':', $name);
    $context->textgroup = array_shift($parts);
    $context->context = implode(':', $parts);

    $context->type = array_shift($parts);
    $context->objectid = $parts ? array_shift($parts) : '';
    // Ramaining elements glued again with ':'
    $context->property = $parts ? implode(':', $parts) : '';
    // Store also source, format
    $context->format = $format;
    $context->source = $string;
    $context->language = $langcode ? $langcode : $language->language;
    return $context;
  }
}

/**
 * Get message parameters from context and string.
 */
function i18nstrings_params($context) {
  return array(
    '%location' => i18nstrings_location($context),
    '%textgroup' => $context->textgroup,
    '%string' => isset($context->source) ? $context->source : t('[empty string]'),
  );
}

/**
 * Get query conditions for this context.
 *
 * @param $context
 *
 * @return DatabaseQuery
 */
function i18nstrings_context_query($context) {
  return db_select('i18n_strings', 's')
    ->fields('s', array('lid', 'format'))
    ->condition('s.textgroup', $context->textgroup);
}

/**
 * Get string translation
 *
 * @param $context
 *
 * @return DatabaseQuery
 */
function i18nstrings_translate_query($context) {
  $query = db_select('locales_source', 's');
  $query->leftJoin('locales_target', 't', 's.lid = t.lid');
  $query->leftJoin('i18n_strings', 'ins', 'ins.lid = t.lid');
  $query->fields('t', array('translation', 'lid'));
  $query->fields('ins', array('format'));
  $query->condition('t.language', $context->language);
  $query->condition('s.location', $context->location);
  return $query;
}

/**
 * Get location string from context.
 *
 * Returns the location for the locale table for a string context.
 */
function i18nstrings_location($context) {
  if (is_string($context)) {
    $context = i18nstrings_context($context);
  }
  $location[] = $context->type;
  // The value may be zero so we check first with is_numeric()
  if (is_numeric($context->objectid) || $context->objectid) {
    $location[] = $context->objectid;
    if ($context->property) {
      $location[] = $context->property;
    }
  }
  return implode(':', $location);
}

/**
 * Set string object into cache
 */
function i18nstrings_cache_set($context) {
  $strings = &drupal_static('i18nstrings_cache');
  $context->cache = TRUE;
  $strings[$context->language][$context->textgroup][$context->context] = $context;
}

/**
 * Get string object from cache
 */
function i18nstrings_cache_get($context) {
  $strings = &drupal_static('i18nstrings_cache');
  if (isset($strings[$context->language][$context->textgroup][$context->context])) {
    return $strings[$context->language][$context->textgroup][$context->context];
  }
  else {
    // Store for next time, mark as cached
    i18nstrings_cache_set($context);
    return $context;
  }
}

/**
 * Callback for menu title translation.
 *
 * @param $name
 *   String id
 * @param $string
 *   Default string, title in default language
 * @param $callback
 *   Aditional callback to be run after this one
 */
function i18nstrings_title_callback($name, $string, $callback = NULL) {
  $string = i18nstrings($name, $string);
  if ($callback) {
    $string = $callback($string);
  }
  return $string;
}

/**
 * @ingroup i18napi
 * @{
 */

/**
 * Translate user defined string.
 *
 * @param $name
 *   Textgroup and location glued with ':'.
 * @param $string
 *   String in default language. Default language may or may not be English.
 * @param $langcode
 *   Optional language code if different from current request language.
 *
 * @return $string
 *   Translated string, $string if not found
 */
function i18nstrings($name, $string, $langcode = NULL) {
  global $language;
  $langcode = $langcode ? $langcode : $language->language;
  // If language is default, just return
  if (i18nstrings_translate_langcode($langcode)) {
    return i18nstrings_translate_string($name, $string, $langcode);
  }
  return $string;
}

/**
 * Get filtered translation.
 *
 * This function is intended to return translations for strings that have an input format
 *
 * @param $name
 *   Full string id
 * @param $default
 *   Default string to return if not found, already filtered
 * @param $langcode
 *   Optional language code if different from current request language.
 */
function i18nstrings_text($name, $default, $langcode = NULL) {
  global $language;
  $langcode = $langcode ? $langcode : $language->language;

  $context = i18nstrings_context($name, $default, $langcode);

  // If language is default or we don't have translation, just return default string
  if (i18nstrings_translate_langcode($langcode) && ($translation = i18nstrings_get_translation($context))) {
    $translated = check_markup($translation->translation, $translation->format, FALSE);
    // Add for l10n client if available, we pass translation object that contains the format
    i18nstrings_l10n_client_add($translation);
  }
  else {
    $translated = $default;
    // Add for l10n client if available
    i18nstrings_l10n_client_add($context);
  }

  return $translated;
}

/**
 * Translation for plain string. In case it finds a translation it applies check_plain() to it
 *
 * @param $name
 *   Full string id
 * @param $default
 *   Default string to return if not found
 * @param $langcode
 *   Optional language code if different from current request language.
 * @param $filter_default
 *   Whether to filter (check_plain) the default too if it is retrieved
 */
function i18nstrings_string($name, $default, $langcode = NULL, $filter_default = FALSE) {
  $translation = i18nstrings($name, NULL, $langcode);
  if (isset($translation)) {
    return check_plain($translation);
  }
  else {
    return $filter_default ? check_plain($default) : $default;
  }
}

/**
 * Update / create translation source for user defined strings.
 *
 * @param $name
 *   Textgroup and location glued with ':'.
 * @param $string
 *   Source string in default language. Default language may or may not be English.
 * @param $format
 *   Input format when the string is diplayed through input formats
 */
function i18nstrings_update($name, $string, $format = NULL) {
  $context = i18nstrings_context($name, $string, NULL, $format);
  $params = i18nstrings_params($context, $string);
  if (!i18nstrings_allowed_format($format)) {
    // This format is not allowed, so we remove the string, in this case we produce a warning
    drupal_set_message(t('The string %location for textgroup %textgroup is not allowed for translation because of its input format.', $params), 'warning');
    return i18nstrings_remove_string($context, $string);
  }
  $status = i18nstrings_update_string($context, $string, $format);
  // Log status message
  switch ($status) {
    case SAVED_UPDATED:
      watchdog('i18nstrings', 'Updated string %location for textgroup %textgroup: %string', $params);
      break;
    case SAVED_NEW:
      watchdog('i18nstrings', 'Created string %location for text group %textgroup: %string', $params);
      break;
  }
  return $status;
}

/**
 * Remove source and translations for user defined string.
 *
 * Though for most strings the 'name' or 'string id' uniquely identifies that string,
 * there are some exceptions (like profile categories) for which we need to use the
 * source string itself as a search key.
 *
 * @param $name
 *   Textgroup and location glued with ':'.
 * @param $string
 *   Optional source string (string in default language).
 */
function i18nstrings_remove($name, $string = NULL) {
  $context = i18nstrings_context($name, $string);
  $status = i18nstrings_remove_string($context);
  // Log status message
  switch ($status) {
    case SAVED_DELETED;
      watchdog('i18nstrings', 'Deleted string %location for textgroup %textgroup: %string', i18nstrings_params($context));
  }
  return $status;
}

/**
 * @} End of "ingroup i18napi".
 */

/*** l10n client related functions ***/

/**
 * Add string to l10n strings if enabled and allowed for this string
 *
 * @param $context
 *   String object
 */
function i18nstrings_l10n_client_add($context) {
  global $language;

  // If current language add to l10n client list for later on page translation.
  // If langcode translation was disabled we are not supossed to reach here.
  if (($language->language == $context->language) && function_exists('l10_client_add_string_to_page')) {
    $translation = !empty($context->translation) ? $context->translation : TRUE;
    if (!$context->source == FALSE) {
      // This means it is a plain string, we don't need to check the format
      l10_client_add_string_to_page(FALSE, $context->translation, $context->textgroup);
    }
    else {
      // Additional checking for input format, if its a dangerous one we ignore the string
      $source = i18nstrings_get_source($context);
      if (!empty($source) && (i18nstrings_allowed_format($source->format) || filter_access($source->format))) {
        l10_client_add_string_to_page($string, $translation, $context->textgroup);
      }
    }
  }
}
